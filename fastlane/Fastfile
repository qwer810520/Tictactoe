# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

fastlane_require 'dotenv'
default_platform(:ios)

platform :ios do

  before_all do
    Dotenv.overload '.env.secret'
  end

  desc "Runs all tests"
  lane :dev_tests do 
    # begin
      install_pods()
      scan(
        workspace: 'TicTacToe.xcworkspace',
        scheme: 'TicTacToeCI',
        devices: ["iPhone 11"],
        code_coverage: true, 
        clean: true,
        slack_url: ENV['SLACK_URL']
      )
    # rescue => exception
    #   errorLog(exception)
    # end
  end

  def install_pods
    cocoapods(
      clean: true,
      podfile: "Podfile",
      try_repo_update_on_error: true
    )
  end

  def errorLog(exception)
    slack(
      message: 'Error occured!',
      success: false,
      slack_url: ENV['SLACK_URL'],
      default_payloads: [:git_branch, :last_git_commit_message, :git_author, :last_git_commit_hash],
      attachment_properties: {
        fields: [
          {
            title: 'Error log',
            value: exception,
            short: true
          },
          {
            title: 'Build number',
            value: ENV["BUILD_NUMBER"]
          }
        ]
      }
    )

    telegram(
      token: ENV['TELEGRAM_TOKEN'],
      chat_id: ENV['TELEGRAM_CHAT_ID'],
      text: "Error occured!, error log: #{exception.to_s}"
    )
  end

  def successLog(message)
    slack(
      message: message,
      success: true,
      slack_url: ENV['SLACK_URL'],
      default_payloads: [:git_branch, :last_git_commit_message, :git_author, :last_git_commit_hash]
    )

    telegram(
      token: ENV['TELEGRAM_TOKEN'],
      chat_id: ENV['TELEGRAM_CHAT_ID'],
      text: "#{message}"
    )
  end

  def swiftLintLane
    swiftLint(
      mode: :lint,
      executable: "Pods/SwiftLint/swiftlint",       
      output_file: "swiftlint.result.json", 
      config_file: ".swiftlint.yml",     
      raise_if_swiftlint_error: true,      
      ignore_exit_status: true,
      strict: true
    )
  end
end
